generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique  // Add this field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  userId      String
  isPublic    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[]
  responses   Response[]
}

model Question {
  id       String       @id @default(cuid())
  quizId   String
  text     String
  type     QuestionType
  options  Json?
  order    Int
  required Boolean      @default(true)
  
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers  Answer[]
}

model Response {
  id        String   @id @default(cuid())
  quizId    String
  createdAt DateTime @default(now())
  
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  responseId String
  questionId String
  value      String
  
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum QuestionType {
  SINGLE_CHOICE
  SHORT_TEXT
}